#include<iostream>
#include<algorithm>
#include<vector>
#include<string>
#include<iterator>
#include <conio.h>
#include<cctype>
using namespace std;

template<class Container>
void write_to_count(const Container& container, const char* delimiter = " ")
{
	std::copy(container.begin(), container.end(),
		std::ostream_iterator<Container::value_type>(std::cout, delimiter));
}

int main()
{
	std::vector<std::string> a = { "zero","one","two","three","four","five","one", "six","seven","eight","nine","ten" };
	std::vector<std::string> b = { "0","1","2","3","4","5","6","7","8","9","10" };

	write_to_count(a);
	std::cout << std::endl;
	write_to_count(b);
	std::cout << std::endl;

	const auto i = std::find(a.begin(), a.end(), "four");// if "foor" it will give,the index which is outside i.e 11
	std::cout << "Index of FouR is : " << i - a.begin() << std::endl;

	//if you want to find the last index, then you have to check in reverse.
	const auto j = std::find(a.rbegin(), a.rend(), "one");
	std::cout << "Index of last one is : " << (a.rend() - j) - 1 << std::endl;

	std::cout << std::endl;

	// SEARCH
	const std::string s = "one;two,three:four";
	const std::string delimit = ";,:"; // ":?*" or " any delimited to search for.(punctuations)

	//test algorithm
	const auto ii = std::find_first_of(s.begin(), s.end(), delimit.begin(), delimit.end());
	std::cout << "Index of first delimiter is :  " << ii - s.begin() << std::endl;

	while (!_kbhit());
	return 0;
}

