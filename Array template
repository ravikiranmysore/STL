

// C++11 the STL has std:::array which is a template based array class
// use std::array instead of raw arrays whenever possible
// Note that we can have non type template parameters
// thats what N is in this case

#include<iostream>
#include<string>

using namespace std;

template<int N>
class Array {
	int size{N};   // how do we get the N;
	int values[N]; // the N needs to be known at compile time.

	friend ostream& operator<<(ostream& os, const Array<N>& arr)
	{
		os << "[ ";
		for (const auto& val : arr.values)
			os << val << " ";
		os << "]" << endl;
		return os;
	}
public:
	Array() = default;
	Array(int init_val) {
		for (auto& item : values)
			item = init_val;
	}
	void fill(int val) {
		for (auto& item : values)
			item = val;
	}
	int get_size() const {
		return size;
	}

	//overloaded subscript operator for easy use
	int& operator[](int index) {
		return values[index];
	}
};

int main()
{
	Array<5> nums;
	cout << "size of nums  is : " << nums.get_size() << endl;
	cout << nums << endl;

	nums.fill(0);
	cout << "size of nums is : " << nums.get_size() << endl;
	cout << nums << endl;

	nums.fill(10);
	cout << nums << endl;

	nums[0] = 1000; // subscript
	nums[3] = 2000;
	cout << nums << endl;

	Array<100> nums2{ 1 };
	cout << "the size of num2 is : " << nums2.get_size() << endl;
	cout << nums2 << endl;
	return  0;
}
*/

#include<iostream>
#include<string>

using namespace std;

template<typename T,int N>
class Array {
	int size{ N };   // how do we get the N;
	T values[N]; // the N needs to be known at compile time.

	friend ostream& operator<<(ostream& os, const Array<T,N>& arr)
	{
		os << "[ ";
		for (const auto& val : arr.values)
			os << val << " ";
		os << "]" << endl;
		return os;
	}
public:
	Array() = default;
	Array(T init_val) {
		for (auto& item : values)
			item = init_val;
	}
	void fill(T val) {
		for (auto& item : values)
			item = val;
	}
	int get_size() const {
		return size;
	}

	//overloaded subscript operator for easy use
	T& operator[](int index) {
		return values[index];
	}
};

int main()
{
	Array<int, 5> nums;
	cout << "size of nums  is : " << nums.get_size() << endl;
	cout << nums << endl;

	nums.fill(0);
	cout << "size of nums is : " << nums.get_size() << endl;
	cout << nums << endl;

	nums.fill(10);
	cout << nums << endl;

	nums[0] = 1000; // subscript
	nums[3] = 2000;
	cout << nums << endl;

	Array<int, 100> nums2{ 1 };
	cout << "the size of num2 is : " << nums2.get_size() << endl;
	cout << nums2 << endl;

	Array<std::string, 20> stri(string{ "Ravi" });
	cout << "the size of stri is : " << stri.get_size() << endl;
	cout << stri << endl;

	stri[1] = string("Kiran");
	cout << stri << endl;

	stri.fill(string("18"));
	cout << stri << endl;

	return  0;
}
