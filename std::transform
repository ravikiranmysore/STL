#include<iostream>
#include<algorithm>
#include<vector>
#include<string>
#include<iterator>
#include <conio.h>
#include<cctype>
using namespace std;

template<class Container>
void write_to_count(const Container& container, const char* delimiter = " ")
{
	std::copy(container.begin(), container.end(),
		std::ostream_iterator<Container::value_type>(std::cout, delimiter));
}

// we write our own template
template<class Container, class Pred>
void ravi_remove( Container& cont, Pred pred)
{
	const auto new_end = std::remove_if(cont.begin(), cont.end(), pred);
	cont.erase(new_end, cont.end() );
}

int main()
{
	//init test containers
	//std::vector<std::string> a = { "zero","one","two","three","four","five","six","seven","eight","nine","ten" };
	//std::vector<std::string> b = { "0","1","2","3","4","5","6","7","8","9","10" };
	std::string a = "rAviKIraNs";
	std::string b;

	/* 
	//write initial states
	write_to_count(a);
	std::cout << std::endl;
	write_to_count(b);
	std::cout << std::endl << std::endl;
	
	// test algoritm
	//Case : 01 - start, end, destination, transform operation
	//std::transform(a.begin(), a.end(), std::back_inserter(b), std::toupper); 

	//Case : 02 : - start, end, same destination, transform operation
	// Can point to same range 
	//std::transform(a.begin(), a.end(), a.begin(), std::toupper);

	write_to_count(a);
	std::cout << std::endl;
	write_to_count(b;
	std::cout << std::endl;
	*/

	//Case : 03 -> two inputs, apply transformation, give out -> 1 output
	std::vector<int> r = { 6,9,8,3,4,2,1,9,7,6,5,0,1,8 };
	std::vector<int> k = { 3,3,9,6,4,2,1,1,6,4,0,1,3,9 };
	std::vector<int> output;

	/*
	std::transform( r.begin(), r.end(), k.begin(), std::back_inserter(output),
	[](int r, int k) { return r + k * k;  } // some random operation
	);

	*/
	
	// Case : 04 
	// transform is some powerfull version of copy, as it can apply some transformation.
	// no need of 3 container, just using two container

	write_to_count(r);
	std::cout << std::endl;
	write_to_count(k);
	std::cout << std::endl;

	std::transform(r.begin(), r.end(), k.begin(), k.begin(),
		[](int a, int b) { return a > b ? a : b; }
	);

	//write results
	//write_to_count(r);
	std::cout << std::endl;
	write_to_count(k);
	//std::cout << std::endl;
	//write_to_count(output);

	while (!_kbhit());
	return 0;
}


-----------------------------------------------------------------

#include<iostream>
#include<algorithm>
#include<vector>
#include<string>
#include<iterator>
#include <conio.h>
#include<cctype>
using namespace std;

template<class Container>
void write_to_count(const Container& container, const char* delimiter = " ")
{
	std::copy(container.begin(), container.end(),
		std::ostream_iterator<Container::value_type>(std::cout, delimiter));
}

// we write our own template
template<class Container, class Pred>
void ravi_remove( Container& cont, Pred pred)
{
	const auto new_end = std::remove_if(cont.begin(), cont.end(), pred);
	cont.erase(new_end, cont.end() );
}

int main()
{
	//init test containers
	//std::vector<std::string> a = { "zero","one","two","three","four","five","six","seven","eight","nine","ten" };
	//std::vector<std::string> b = { "0","1","2","3","4","5","6","7","8","9","10" };
	std::string a = "rAviKIraNs";
	std::string b;

	/* 
	//write initial states
	write_to_count(a);
	std::cout << std::endl;
	write_to_count(b);
	std::cout << std::endl << std::endl;
	
	// test algoritm
	//Case : 01 - start, end, destination, transform operation
	//std::transform(a.begin(), a.end(), std::back_inserter(b), std::toupper); 

	//Case : 02 : - start, end, same destination, transform operation
	// Can point to same range 
	//std::transform(a.begin(), a.end(), a.begin(), std::toupper);

	write_to_count(a);
	std::cout << std::endl;
	write_to_count(b;
	std::cout << std::endl;
	*/

	//Case : 03 -> two inputs, apply transformation, give out -> 1 output
	std::vector<int> r = { 6,9,8,3,4,2,1,9,7,6,5,0,1,8 };
	std::vector<int> k = { 3,3,9,6,4,2,1,1,6,4,0,1,3,9 };
	std::vector<int> output;

	/*
	std::transform( r.begin(), r.end(), k.begin(), std::back_inserter(output),
	[](int r, int k) { return r + k * k;  } // some random operation
	);

	
	
	// Case : 04 
	// transform is some powerfull version of copy, as it can apply some transformation.
	// no need of 3 container, just using two container



	std::transform(r.begin(), r.end(), k.begin(), k.begin(),
		[](int a, int b) { return a > b ? a : b; }
	);
*/

	write_to_count(r);
	std::cout << std::endl;
	write_to_count(k);
	std::cout << std::endl;


	std::for_each(r.begin(), r.begin() + 5,
		[]( int& v)
		{
		  v *= 2;
		}
	);

	std::cout << std::endl;
	//write results
	write_to_count(r);
	std::cout << std::endl;
	//write_to_count(k);
	//std::cout << std::endl;
	//write_to_count(output);

	while (!_kbhit());
	return 0;
}


