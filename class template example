
#include<iostream>
#include<string>
#include<vector>

using namespace std;

template<typename T>
class Item {
private:
	std::string name;
	T value;
public :
	Item(std::string name, T value) : name{name}, value{value}
	{}
	std::string get_name() const {
		return name;
	}
	T get_value() const
	{
		return value;
	}
};

template<typename T1, typename T2>
struct My_Pair {
	T1 first;
	T2 second;
};

int main()
{
	Item<int> item1{ "abc",100 };
	cout << item1.get_name() << " " << item1.get_value() << endl;

	Item<std::string> item2{ "duc","also string" };
	cout << item2.get_name() << " " << item2.get_value() << endl;

	Item< Item<std::string> > item3{ "thisis",{"totally","different" } };
	cout << item3.get_name() << " "
		<< item3.get_value().get_name() << " "
		<< item3.get_value().get_value() << endl;

	cout << "******************" << endl;

	std::vector<Item<double>> vec{};
	vec.push_back(Item<double>("One", 100.0));
	vec.push_back(Item<double>("Two", 200.0));
	vec.push_back(Item<double>("ThREE", 300.0));

	for (const auto& itemy : vec) {
	 cout << itemy.get_name() << " " << itemy.get_value() << endl;
	}

	cout << "******************" << endl;

	My_Pair <std::string, int> p1{ "frank",100 };
	My_Pair <int,double> p2{ 25,12.6 };

	cout << p1.first << " " << p1.second << endl;
	cout << p2.first << " " << p2.second << endl;

	return 0;
}
