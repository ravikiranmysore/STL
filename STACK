#define ST 0
#if ST
#include <iostream>
#include <stack>
#include <cstring>
using namespace std;

#define MAX 1000

class Stack
{
    int top;

public:
    int a[MAX]; // Maximum size of Stack

    Stack() { top = -1; }
    bool push(int x);
    int pop();
    int peek();
    bool isEmpty();
};

bool Stack::push(int x)
{
    if (top >= (MAX - 1))
    {
        cout << "Stack Overflow";
        return false;
    }
    else
    {
        a[++top] = x;
        cout << x << " pushed into stack\n";
        return true;
    }
}

int Stack::pop()
{
    if (top < 0)
    {
        cout << "Stack Underflow";
        return 0;
    }
    else
    {
        int x = a[top--];
        return x;
    }
}
int Stack::peek()
{
    if (top < 0)
    {
        cout << "Stack is Empty";
        return 0;
    }
    else
    {
        int x = a[top];
        return x;
    }
}

bool Stack::isEmpty()
{
    return (top < 0);
}

void print(std::stack<int> str)
{
    while (!str.empty())
    {
        cout << str.top() << endl;
        str.pop();
    }
}
class Stacky
{
public:
    int top;
    unsigned capacity;
    char *array;
};

Stacky *createStack(unsigned capacity)
{
    Stacky *stack = new Stacky();
    stack->capacity = capacity;
    stack->top = -1;
    stack->array = new char[(stack->capacity * sizeof(char))];
    return stack;
}

int isFull(Stacky *stack)
{
    return stack->top == stack->capacity - 1;
}

int isEmpty(Stacky *stack)
{
    return stack->top == -1;
}

void push(Stacky *stack, char item)
{
    if (isFull(stack))
        return;
    stack->array[++stack->top] = item;
}

char pop(Stacky *stack)
{
    if (isEmpty(stack))
        return -1;
    return stack->array[stack->top--];
}

void reverse(char str[])
{
    int n = strlen(str);
    Stacky *stack = createStack(n);

    int i;
    for (i = 0; i < n; i++)
        push(stack, str[i]);

    for (i = 0; i < n; i++)
        str[i] = pop(stack);
}

int main()
{
    Stack s;
    s.push(10);
    s.push(20);
    s.push(30);
    cout << s.pop() << " Popped from stack\n";

    stack<int> stk;
    stk.push(2);
    stk.push(12);
    stk.push(5);
    print(stk);

    char str[] = "ReversedString";

    reverse(str);
    cout << "Reversed string is : " << str;

    return 0;
}
#endif

#include <iostream>
#include <string>
#include <stack>
using namespace std;

#define SIZE 5
int A[SIZE];
int top = -1;

bool isEmpty()
{
    if (top == -1)
        return true;
    else
        return false;
}

void push(int value)
{
    if (top == SIZE - 1)
    {
        cout << "Stack is empty" << endl;
    }
    else
    {
        top++;
        A[top] = value;
    }
}
void pop()
{
    if (isEmpty())
    {
        cout << "Stack is empty" << endl;
    }
    else
    {
        top--;
    }
}

void display()
{
    if (isEmpty())
    {
        cout << "Stack is empty" << endl;
    }
    else
    {
        for (int i = 0; i <= top; i++)
        {
            cout << A[i] << " ";
        }
    }
}

void showTop()
{
    if (!isEmpty())
    {
        cout << A[top] << endl;
    }
}

struct Node
{
    Node *link;
    int data;
};
Node *toper = NULL;
void push_LL(int data)
{
    Node *temp;
    temp = new Node();
    if (!temp)
    {
        cout << "\nHeap Overflow";
        exit(1);
    }
    temp->data = data;
    temp->link = toper;
    toper = temp;
}

void pop_LL()
{
    Node *temp;
    if (toper == NULL)
    {
        cout << "\nStack Underflow" << endl;
        exit(1);
    }
    else
    {
        temp = toper; // Node *temp = toper;
        toper = toper->link;
        temp->link = NULL;
        free(temp);
    }
}

void display_LL()
{
    struct Node *temp;

    // check for stack underflow
    if (toper == NULL)
    {
        cout << "\nStack Underflow";
        exit(1);
    }
    else
    {
        temp = toper;
        while (temp != NULL)
        {
            cout << temp->data << " ";
            temp = temp->link;
        }
    }
}
bool areParanthesisBalanced(string expr)
{
    stack<char> s;
    char x;

    for (int i = 0; i < expr.length(); i++)
    {
        if (expr[i] == '(' || expr[i] == '[' || expr[i] == '{')
        {
            s.push(expr[i]);
            continue;
        }
        if (s.empty())
            return false;

        switch (expr[i])
        {
        case ')':
            x = s.top();
            s.pop();
            if (x == '{' || x == '[')
                return false;
            break;

        case '}':
            x = s.top();
            s.pop();
            if (x == '(' || x == '[')
                return false;
            break;

        case ']':
            x = s.top();
            s.pop();
            if (x == '(' || x == '{')
                return false;
            break;
        }
    }
    return (s.empty());
}

int matchingParit(char a, char b)
{
    if (a == '{' && b == '}')
        return 1;
    if (a == '[' && b == ']')
        return 1;
    if (a == '(' && b == ')')
        return 1;
    else
    {
        return 0;
    }
}
int main()
{
    push(33);
    push(22);
    push(11);
    cout << "Pushed : ";
    display();

    cout << "\nopped : ";
    pop();
    display();

    cout << "\nTop : ";
    showTop();
    display();
    cout << "END" << endl;

    push_LL(9);
    push_LL(99);
    push_LL(999);
    push_LL(9999);

    display_LL();
    pop_LL();
    pop_LL();
    cout << "\nAfter pop : ";
    display_LL();

    string expr = "{(}[)]";

    if (areParanthesisBalanced(expr))
        cout << "\nBalanced";
    else
        cout << "\nNot Balanced";

    stack<char> st;
    for (int i = 0; i < expr.length(); i++)
    {
        if (expr[i] == '(' || expr[i] == '{' || expr[i] == '[')
            st.push(expr[i]);
        else if (!matchingParit(st.top(), expr[i]) || st.empty())
        {
            cout << "\nNot a matching pair" << endl;
            break;
        }
        else
        {
            st.pop();
        }
    }
    if (st.empty())
    {
        cout << "\n Balanced and matched" << endl;
    }

    return 0;
}
