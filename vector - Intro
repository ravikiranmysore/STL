  /* Vectors are object oriented containers defined in STL.
	-> Dynamic size.
	-> [] -> no checking, but has functions to check bounds.
	-> vecot[index] or vecot.at(index) -> is same
	-> push_back -> automatically allocates space.
	-> vectr.at(0).at(0) -> also works
   */

#include<bits/stdc++.h>
#include<iomanip>
using namespace  std;

int main()
{

    vector<int> v1;
    vector<int> v2;
    v1.push_back(10);
    v1.push_back(20);

    cout << "v1[0] - "<< v1[0] <<"  same as v1.at(0) : " << v1.at(0) << endl;
    cout << "v1[1] - "<< v1[1] << " same as v1.at(1) : "<<v1.at(1)<< endl;

    cout << "v1[0].size() or v1[0].at(0) : doesnt work but \t v1.size() : " << v1.size()  << endl;

    cout << "-------------"<< endl;
    v2.push_back(100);
    v2.push_back(200);

    cout << "v2[0] - "<< v2[0] <<" same as v2.at(0) : " << v2.at(0) << endl;
    cout << "v2[1] - "<< v2[1] << " same as v2.at(1) : "<<v2.at(1)<< endl;

    cout << "v1[0].size() or v1[0].at(0) : doesnt work but \t v1.size() : " << v1.size()  << endl;

    for (int i = 0; i < v2.size(); i ++) {

        cout <<"v2 : " << v2.at(i)<< " \t";
    }
    cout << "\n"<< endl;


    cout << "-------------"<< endl;


    //v1.at(0) = 1000;
    replace(v1.begin(), v1.end(), 10, 173);
    //v1.emplace(v1.begin(), 1000);

    cout << "\n\n10 is replaced with : "<< v1[0] << "\n"<< endl;

    cout << "v1[0] - "<< v1[0] <<" same as v1.at(0) : " << v1.at(0) << endl;
    for(int i = 0; i < v1.size();i++)
    {
        cout << v1.at(i) << ' ';
        cout << endl;
    }

    // vector 2d
    vector< vector<int> > vec_2d;

    vec_2d.push_back(v1);
    vec_2d.push_back(v2);
    
   cout << "**********************************************"<< endl;
    cout << "Displaying elements of vec 2d "<< endl;
    cout << vec_2d.at(0).at(0) << " " << vec_2d.at(0).at(1) << endl;
    cout << vec_2d.at(1).at(0) << " " << vec_2d.at(1).at(1) << endl;
    cout << "**********************************************\n\n"<< endl;

    cout << "\n Now for 2d vector without 'at': " <<endl;
    for ( int n = 0; n < v1.size(); ++n) {
        for ( int m = 0; m < v2.size(); ++m )
        {
            cout << vec_2d[m].at(n)<< "<--vec_2d["<<n<<"].at("<< m <<") "<< "\t";
        }
        cout << endl;
    }

    return 0;
}
